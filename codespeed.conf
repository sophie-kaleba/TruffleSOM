# Config file for ReBench
# Config format is YAML (see http://yaml.org/ for detailed spec)
default_data_file: 'cache_benchmark_var_long.data'
default_experiment: cache-pollution-var

# reporting:
#     # Benchmark results will be reported to ReBenchDB
#     rebenchdb:
#         # this url needs to point to the API endpoint
#         db_url: https://rebench.stefan-marr.de/rebenchdb/results
#         repo_url: https://github.com/smarr/SOMns
#         record_all: true # make sure everything is recorded
#         project_name: SOMns

runs:
  min_iteration_time: 5

# definition of benchmark suites
benchmark_suites:
    baseline:
        description: Baseline - pure array
        gauge_adapter: RebenchLog
        command: &MACRO_CMD " Examples/Benchmarks/BenchmarkHarness.ns %(benchmark)s"
        max_invocation_time: 1200
        benchmarks:
            - Baseline:
                extra_args: "2000 0 600"

    pollution:
        description: Pollution - 3 proxies are added at the beginning of the array
        gauge_adapter: RebenchLog
        command: *MACRO_CMD
        max_invocation_time: 1200
        benchmarks:
            - CachePollution:
                extra_args: "2000 0 600"

    cleaning:
        description: Cleaning 
        gauge_adapter: RebenchLog
        command: *MACRO_CMD
        max_invocation_time: 1200
        benchmarks:
            - CacheCleaning:
                extra_args: "2000 0 600"

    baseline-repeat:
        description: Baseline - pure array
        gauge_adapter: RebenchLog
        command: *MACRO_CMD
        max_invocation_time: 1200
        benchmarks:
            - BaselineRepeat:
                extra_args: "1000 0 500"

    pollution-repeat:
        description: Pollution with repetition - the primitive is not activated
        gauge_adapter: RebenchLog
        command: *MACRO_CMD
        max_invocation_time: 1200
        benchmarks:
            - CachePollutionRepeat:
                extra_args: "1000 0 500"

    cleaning-repeat:
        description: Cleaning with repetition - the primitive is activated
        gauge_adapter: RebenchLog
        command: *MACRO_CMD
        max_invocation_time: 1200
        benchmarks:
            - CacheCleaningRepeat:
                extra_args: "1000 0 500"
    
    baseline-var:
        description: Baseline - pure array
        gauge_adapter: RebenchLog
        command: &VAR_CMD " Examples/Benchmarks/BenchmarkHarnessCache.ns %(benchmark)s %(iterations)s 0 1000 %(input)s 2"
        max_invocation_time: 1200
        iterations: 2000
        benchmarks:
            - BaselineVar:
                input_sizes: [0, 1, 2, 3, 4, 5, 6]

    pollution-var:
        description: Pollution with repetition - the primitive is not activated
        gauge_adapter: RebenchLog
        command: *VAR_CMD
        max_invocation_time: 1200
        iterations: 2000
        benchmarks:
            - CachePollutionVar:
                input_sizes: [0, 1, 2, 3, 4, 5, 6]

    cleaning-var:
        description: Cleaning with repetition - the primitive is activated
        gauge_adapter: RebenchLog
        command: *VAR_CMD
        max_invocation_time: 1200
        iterations: 2000
        benchmarks:
            - CacheCleaningVar:
                input_sizes: [0, 1, 2, 3, 4, 5, 6]

# VMs have a name and are specified by a path and the binary to be executed
executors:
    TruffleSOM:
        path: .
        args: "-b" 
        executable: som

# define the benchmarks to be executed for a re-executable benchmark run
experiments:
    cache-pollution:
        description: Run the 3 versions of the cache pollution benchmark
        data_file: cache-pollution-vanilla.data
        executions:
            - TruffleSOM:
                suites:
                  - baseline
                  - pollution
                  - cleaning


    cache-pollution-repeat:
        description: Run the 3 versions of the cache pollution benchmark
        data_file: cache-pollution-repeat.data
        executions:
            - TruffleSOM:
                suites:
                  - baseline-repeat
                  - pollution-repeat
                  - cleaning-repeat

    
    cache-pollution-var:
        description: Run the 3 versions of the cache pollution benchmark
        data_file: cache-pollution-var-long.data
        executions:
            - TruffleSOM:
                suites:
                  - baseline-var
                  - pollution-var
                  - cleaning-var

 
