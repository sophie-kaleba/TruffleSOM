<project name="som" basedir="." default="compile"
    xmlns:unless="ant:unless"
    xmlns:if="ant:if"
    xmlns:jacoco="antlib:org.jacoco.ant">

    <property name="jvmci.version" value="jvmci-20.2-b03" />
    <property name="jdk8.version"  value="262+10" />

    <macrodef name="travis">
        <attribute name="target" />
        <attribute name="start" default="" />
        <sequential>
            <echo message="travis_fold:start:@{target}${line.separator}@{start}${line.separator}" unless:blank="@{start}" if:true="${env.TRAVIS}" />
            <echo message="travis_fold:end:@{target}${line.separator}"             if:blank="@{start}" if:true="${env.TRAVIS}" />
        </sequential>
    </macrodef>

    <condition property="is.atLeastJava9" value="true" else="false">
      <or>
        <matches string="${java.version}" pattern="^9"/>
        <matches string="${java.version}" pattern="^1[0-9]"/>
      </or>
    </condition>
    <condition property="kernel" value="darwin-amd64" else="linux-amd64">
        <os family="mac"/>
    </condition>
    <condition property="home.ext" value="/Contents/Home" else="">
        <os family="mac"/>
    </condition>

    <travis target="env" start="Environment" />
    <echo>
        ant.java.version: ${ant.java.version}
        java.version:     ${java.version}
        is.atLeastJava9:  ${is.atLeastJava9}
        kernel:           ${kernel}
        env.TRAVIS:       ${env.TRAVIS}
    </echo>
    <travis target="env" />

    <property name="src.dir"     location="src"/>
    <property name="src_gen.dir" location="src_gen"/>
    <property name="test.dir"    location="tests"/>
    <property name="lib.dir"     location="libs" />
    <property name="bd.dir"      location="${lib.dir}/black-diamonds/"/>
    <property name="sdk.dir"     location="${lib.dir}/truffle/sdk" />
    <property name="sdk.build"   location="${sdk.dir}/mxbuild/dists/jdk1.8" />
    <property name="truffle.dir"   location="${lib.dir}/truffle/truffle" />
    <property name="truffle.build" location="${truffle.dir}/mxbuild/dists/jdk1.8" />
    <property name="vm.dir"        location="${lib.dir}/truffle/vm" />
    <property name="compiler.dir"   location="${lib.dir}/truffle/compiler" />
    <property name="compiler.build" location="${truffle.dir}/mxbuild/dists/jdk1.8" />
    <property name="junit.version" value="4.12" />

    <property name="checkstyle.version" value="8.11" />
    <property name="jvmci.home"  location="${lib.dir}/jvmci${home.ext}" />

    <property name="mx.cmd" value="../../mx/mx" />

    <property name="build.dir"   value="build"/>
    <property name="classes.dir" value="${build.dir}/classes"/>

    <property environment="env"/>

    <path id="project.classpath">
        <pathelement location="${classes.dir}" />
        <pathelement location="${test.dir}" />
        <pathelement location="${bd.dir}/build/classes" />
        <pathelement location="${sdk.build}/graal-sdk.jar" />
        <pathelement location="${sdk.build}/word-api.jar" />
        <pathelement location="${lib.dir}/junit-${junit.version}.jar" />
        <pathelement location="${lib.dir}/hamcrest-core-1.3.jar" />
        <pathelement location="${truffle.build}/truffle-api.jar" />
        <pathelement location="${truffle.build}/truffle-dsl-processor.jar" />
        <pathelement location="${lib.dir}/affinity.jar"/>
        <pathelement location="${lib.dir}/slf4j-api.jar"/>
        <pathelement location="${lib.dir}/slf4j-simple.jar"/>
        <pathelement location="${lib.dir}/jna-platform.jar"/>
        <pathelement location="${lib.dir}/jna.jar"/>
    </path>

    <available file="${jvmci.home}"  type="dir" property="jvmci.home.present" />

    <condition property="truffle.and.jvmci.present">
      <and>
        <available file="${truffle.dir}" />
        <available file="${jvmci.home}" />
       </and>
    </condition>

    <target name="clean" description="Remove build directories and generated code">
        <travis target="clean" start="clean" />

        <delete dir="${build.dir}"/>
        <delete dir="${src_gen.dir}"/>

        <travis target="clean" />
    </target>

    <target name="clobber" description="Do clean, and also clean truffle build" depends="clean">
        <travis target="clobber" start="clobber" />

        <exec executable="${mx.cmd}" dir="${truffle.dir}">
          <arg value="--dynamicimports"/>
          <arg value="../sdk"/>
          <arg value="ideclean"/>
        </exec>

        <exec executable="${mx.cmd}" dir="${compiler.dir}">
          <arg value="--dynamicimports"/>
          <arg value="../sdk"/>
          <arg value="clean"/>
          <env key="JAVA_HOME" value="${jvmci.home}" />
        </exec>

        <ant dir="${bd.dir}" useNativeBasedir="true" target="clean" inheritAll="false" />

        <travis target="clobber" />
    </target>

    <target name="eclipseformat">
      <travis target="eclipseformat" start="eclipseformat" />

      <pathconvert pathsep=" " property="javafiles">
        <fileset dir="${src.dir}">
          <include name="**/*.java"/>
        </fileset>
        <fileset dir="${test.dir}">
          <include name="**/*.java"/>
        </fileset>
      </pathconvert>
      <exec executable="${env.ECLIPSE_EXE}" dir="${basedir}">
          <arg value="-nosplash"/>
          <arg value="-application"/>
          <arg value="-consolelog"/>
          <arg value="-data"/>
          <arg value="${basedir}"/>
          <arg value="-vm"/>
          <arg value="${env.JAVA_HOME}/bin/java"/>
          <arg value="org.eclipse.jdt.core.JavaCodeFormatter"/>
          <arg value="-config"/>
          <arg value="${basedir}/.settings/org.eclipse.jdt.core.prefs"/>
          <arg line="${javafiles}"/>
      </exec>
      <exec executable="git" dir="${basedir}" failonerror="true">
          <arg value="status" />
          <arg value="*.java" />
      </exec>
      <exec executable="git" dir="${basedir}" failonerror="true">
          <arg value="diff-index" />
          <arg value="--quiet" />
          <arg value="HEAD" />
      </exec>

      <travis target="eclipseformat" />
    </target>

    <target name="check-core-lib-available">
        <available file="core-lib/.git" property="core-lib.present"/>
    </target>
    <target name="core-lib" depends="check-core-lib-available"
            unless="core-lib.present">
      <exec executable="git">
        <arg value="submodule" />
        <arg value="update" />
        <arg value="--init" />
      </exec>
    </target>

    <target name="truffle-libs" depends="jvmci-libs,core-lib">
        <travis target="truffle-libs" start="Build Truffle" />
        <exec executable="${mx.cmd}" dir="${compiler.dir}" failonerror="true">
            <arg value="build"/>
            <arg value="--no-native"/>
            <env key="JAVA_HOME" value="${jvmci.home}" />
        </exec>
        <travis target="truffle-libs" />
    </target>
    
    <target name="libgraal-jdk" depends="jvmci-libs,core-lib">
        <travis target="libgraal-jdk" start="Build LibGraal-enabled JDK" />
        <exec executable="${mx.cmd}" dir="${vm.dir}" failonerror="true">
            <env key="JAVA_HOME" value="${jvmci.home}" />
            <!-- REM: This needs to match ./som -->
            <env key="DYNAMIC_IMPORTS" value="/substratevm,/tools,/truffle,/sdk,/compiler" />
            <env key="FORCE_BASH_LAUNCHERS" value="true" />
            <env key="DISABLE_LIBPOLYGLOT" value="true" />
            <env key="EXCLUDE_COMPONENTS" value="svmag,nju,nic,ni,nil" />
            <arg line="build"/>
        </exec>
        <travis target="libgraal-jdk" />
    </target>

    <target name="bd-libs"> <!-- implicit dependency on truffle-libs -->
        <travis target="bd-libs" start="Build Black Diamonds" />

        <ant dir="${bd.dir}" useNativeBasedir="true" target="libs-junit" inheritAll="false">
            <property name="force.java8"   value="${is.atLeastJava9}" />
        </ant>
        <ant dir="${bd.dir}" useNativeBasedir="true" target="compile-nodeps" inheritAll="false">
            <property name="sdk.build"   value="${sdk.build}" />
            <property name="truffle.dir" value="${truffle.dir}" />
            <property name="truffle.build" value="${truffle.build}" />
            <property name="force.java8"   value="${is.atLeastJava9}" />
        </ant>

        <travis target="bd-libs" />
    </target>

    <target name="ideinit" depends="core-lib">
        <exec executable="${mx.cmd}" dir="${compiler.dir}">
          <env key="JAVA_HOME" value="${jvmci.home}" />
          <arg value="--dynamicimports"/>
          <arg value="../sdk"/>
          <arg value="eclipseinit"/>
        </exec>
    </target>

    <target name="ideclean" depends="core-lib">
        <exec executable="${mx.cmd}" dir="${compiler.dir}">
          <arg value="--dynamicimports"/>
          <arg value="../sdk"/>
          <arg value="ideclean"/>
        </exec>
    </target>

    <target name="jvmci-libs" unless="skip.libs">
        <get src="https://github.com/graalvm/graal-jvmci-8/releases/download/${jvmci.version}/openjdk-8u${jdk8.version}-${jvmci.version}-${kernel}.tar.gz"
             usetimestamp="true"
             dest="${lib.dir}/jvmci.tar.gz" />
        <mkdir dir="${lib.dir}/jvmci" />
        <exec executable="tar" dir="${basedir}" failonerror="true">
          <arg line="-C ${lib.dir}/jvmci -xzf ${lib.dir}/jvmci.tar.gz --strip 1"/>
        </exec>
    </target>

    <target name="jvmci-home">
        <echo>${jvmci.home}</echo>
    </target>

    <target name="libs" depends="core-lib,bd-libs">
        <get src="https://repo1.maven.org/maven2/junit/junit/${junit.version}/junit-${junit.version}.jar"
            usetimestamp="true"
            dest="${lib.dir}/junit-${junit.version}.jar" />
        <get src="https://repo1.maven.org/maven2/org/hamcrest/hamcrest-core/1.3/hamcrest-core-1.3.jar"
            usetimestamp="true"
            dest="${lib.dir}/hamcrest-core-1.3.jar" />
        <get src="https://repo1.maven.org/maven2/net/openhft/affinity/3.2.3/affinity-3.2.3.jar"
             usetimestamp="true"
             dest="${lib.dir}/affinity.jar"/>
        <get src="https://repo1.maven.org/maven2/org/slf4j/slf4j-api/1.7.30/slf4j-api-1.7.30.jar"
             usetimestamp="true"
             dest="${lib.dir}/slf4j-api.jar"/>
        <get src="https://repo1.maven.org/maven2/org/slf4j/slf4j-nop/1.7.30/slf4j-nop-1.7.30.jar"
             usetimestamp="true"
             dest="${lib.dir}/slf4j-nop.jar"/>
        <get src="https://repo1.maven.org/maven2/org/slf4j/slf4j-simple/1.7.30/slf4j-simple-1.7.30.jar"
             usetimestamp="true"
             dest="${lib.dir}/slf4j-simple.jar"/>
        <get src="https://repo1.maven.org/maven2/net/java/dev/jna/jna-platform/5.5.0/jna-platform-5.5.0.jar"
             usetimestamp="true"
             dest="${lib.dir}/jna-platform.jar"/>
        <get src="https://repo1.maven.org/maven2/net/java/dev/jna/jna/5.5.0/jna-5.5.0.jar"
             usetimestamp="true"
             dest="${lib.dir}/jna.jar"/>
    </target>

    <target name="checkstyle-jar">
        <mkdir dir="${lib.dir}" />
        <get src="https://github.com/checkstyle/checkstyle/releases/download/checkstyle-${checkstyle.version}/checkstyle-${checkstyle.version}-all.jar"
            usetimestamp="true"
            dest="${lib.dir}/checkstyle-${checkstyle.version}-all.jar" />
    </target>

    <target name="checkstyle" depends="checkstyle-jar" description="Check Code with Checkstyle">
        <taskdef resource="com/puppycrawl/tools/checkstyle/ant/checkstyle-ant-task.properties" classpath="${lib.dir}/checkstyle-${checkstyle.version}-all.jar" />
        <checkstyle config=".checkstyle_checks.xml">
          <fileset dir="src" includes="**/*.java"/>
          <formatter type="plain"/>
        </checkstyle>
    </target>

    <target name="som-compile" description="Compile TruffleSOM, without dependencies">
        <travis target="compile" start="compile" />

        <mkdir dir="${build.dir}"/>
        <mkdir dir="${classes.dir}" />
        <mkdir dir="${src_gen.dir}" />
        <javac includeantruntime="false" srcdir="${src.dir}" destdir="${classes.dir}" debug="true">
          <classpath refid="project.classpath" />
          <compilerarg line="-s ${src_gen.dir}" />
          <compilerarg line="-XDignore.symbol.file" />
          <compilerarg line="-Xlint:all" />
        </javac>
        <javac includeantruntime="false" srcdir="${src_gen.dir}" destdir="${classes.dir}" debug="true">
          <classpath refid="project.classpath" />
          <compilerarg line="-s ${src_gen.dir}" />
          <compilerarg line="-Xlint:all" />
        </javac>
        <javac includeantruntime="false" srcdir="${test.dir}" destdir="${classes.dir}" debug="true">
          <classpath refid="project.classpath" />
        </javac>

        <travis target="compile" />
    </target>

    <target name="compile-for-jar" depends="truffle-libs,libs,som-compile" description="Compile TruffleSOM without LibGraal">
    </target>
    
    <target name="compile" depends="libgraal-jdk,libs,som-compile" description="Compile TruffleSOM with LibGraal">
    </target>

    <target name="jar" depends="compile-for-jar" description="Package as JAR">
        <jar destfile="${build.dir}/som.jar" basedir="${classes.dir}"></jar>
    </target>

    <target name="test" depends="compile-for-jar" description="Execute tests">
        <travis target="test" start="test" />

        <junit haltonerror="false" haltonfailure="false" failureproperty="test.failed"
            outputtoformatters="true">
            <jvmarg value="-ea" />
            <jvmarg value="-esa" />
            <classpath refid="project.classpath" />
            <batchtest fork="yes" filtertrace="false">
              <fileset dir="tests">
                  <include name="**/*Test*.java"/>
              </fileset>
            </batchtest>
            <formatter type="brief" usefile="false"/>
        </junit>

        <java classname="trufflesom.vm.Universe" fork="true" failonerror="true">
            <classpath refid="project.classpath" />
            <jvmarg value="-ea" />
            <jvmarg value="-esa" />
            <arg line="-cp Smalltalk TestSuite/TestHarness.som --ignore-inefficacies" />
        </java>
        <fail message="Basic tests failed." if="test.failed" />

        <travis target="test" />
    </target>

    <target name="som-test" depends="compile-for-jar" description="Test som script">
        <travis target="som-test" start="SOM Test" />

        <exec executable="./som" failonerror="true">
            <arg value="-G" />
            <arg value="--no-libgraal" />
            <arg value="-cp" />
            <arg value="Smalltalk" />
            <arg value="TestSuite/TestHarness.com" />
            <arg value="TestSuite/EmptyTest.som" />
        </exec>

        <travis target="som-test" />
    </target>

    <target name="tests" depends="test, som-test" />

</project>
